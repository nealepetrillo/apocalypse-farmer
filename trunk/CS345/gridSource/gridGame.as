package {		import flash.display.Sprite;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;			public class gridGame extends Sprite {				var levelNumber:uint;		var colorList:Array;		var userData:TextField;		var gameSquare:gridGameSquare;		var WIDTH:uint=64;		var DEPTH:uint=3;		var OFFSET:uint= WIDTH;		var STARTLEVEL:uint = 1;		var HARDMODE:Boolean = false;				private function colorChoice(n:uint, howMany:uint):uint {			var pair:String;			var whichOne:uint;			var angleToNinety:Number;			var theColor:uint;			var xproj:uint;			var yproj:uint;						whichOne = n%howMany;						pair = "GB";    								//phase 1			if(6*whichOne < 2*howMany) { pair = "RG"; }		//phase 0			if(3*whichOne >= 2*howMany) { pair = "BR"; }	//phase 2						angleToNinety = ((3*whichOne)%howMany)*(Math.PI/(2*howMany));			xproj = uint(0xFF * Math.cos(angleToNinety));			yproj = uint(0xFF * Math.sin(angleToNinety));			trace("X:"+xproj+" Y:"+yproj);			switch(pair) {				case "RG":  theColor= (0x000000 | (xproj<<16) | (yproj<<8)); break;				case "GB":  theColor= (0x000000 | (xproj<<8) | (yproj<<0)); break;				case "BR":  theColor= (0x000000 | (xproj<<0) | (yproj<<16)); break;				default: theColor= 0x000000;//				case "RG":	return new Color(Math.cos(angleToNinety), Math.sin(angleToNinety), 0);//				case "GB":  return new Color(0, Math.cos(angleToNinety), Math.sin(angleToNinety));//				case "BR":  return new Color(Math.sin(angleToNinety), 0, Math.cos(angleToNinety));//				default: 	return new Color(0.5, 0.5, 0.5);			}			trace("colorChoice("+n+","+howMany+")="+theColor);			return theColor;		}				private function setLevel(n:uint):void {			if(n<1) levelNumber=1;			else levelNumber=n;			colorList = new Array(1+levelNumber);			for(var i=0; i<=levelNumber; i++){				colorList[i]=colorChoice(i,levelNumber+1);			}		}				public function getColor(i:uint, makeDim:Boolean):uint {			var theColor;			trace("Level "+levelNumber+" getColor("+i+","+makeDim+")="+colorList[i%(levelNumber+1)]);			if(levelNumber<1) return 0x000000; //We're currently not on any level, give a grey square. I assume if level>0 then colorList exists			theColor=colorList[i%(levelNumber+1)];			if(makeDim){				theColor-=0x888888;			}			return theColor;						}				public function getLevel():uint { return levelNumber; }				private function setupSquare():void {			trace("gridGame.as line 57");			gameSquare = new gridGameSquare(this, DEPTH, WIDTH, true, HARDMODE);			gameSquare.x = OFFSET;			gameSquare.y = OFFSET;			gameSquare.visible = true;			gameSquare.addEventListener(SquareGameEvent.ALIGN, winLevel);			addChild(gameSquare);		}				public function gridGame(){			setLevel(STARTLEVEL);			setupSquare();			trace("Width: "+WIDTH+" Depth: "+DEPTH);			userData = new TextField();			userData.x = 0*WIDTH*(Math.pow(2,DEPTH)) + OFFSET;			userData.y = WIDTH*(Math.pow(2,DEPTH)) + OFFSET;			trace("userData positioned at "+WIDTH*(Math.pow(2,DEPTH+1)));			userData.visible = true;			userData.text = "Make all the squares the same color";			userData.border = true;			userData.autoSize = TextFieldAutoSize.LEFT;			addChild(userData);		}				public function winLevel(e:SquareGameEvent):void {			userData.text = "You have completed level "+levelNumber+" on color "+e.getColor()+". Can you tackle the next level?";			gameSquare.cleanup();			gameSquare.removeEventListener(SquareGameEvent.ALIGN, winLevel);			gameSquare = null;						setLevel(levelNumber+1);			setupSquare();		}	}}												