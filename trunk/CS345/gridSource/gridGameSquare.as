package {		import flash.display.Sprite;	import flash.text.TextField;	import flash.events.MouseEvent;		public class gridGameSquare extends Sprite {				private var theGame:gridGame;		//The four kids will be getChildAt(0..3)		private var subSquare:gridGameSquare;		private var hitCount:uint;		private var iAmTop:Boolean;		private var iAmLeaf:Boolean;		private var myWidth:uint;		private var myColor:uint;		private var pureColor:Boolean;				public function gridGameSquare(game:gridGame, gameDepth:uint, minWidth:uint, isTop:Boolean, hardMode:Boolean){			theGame=game;			iAmTop=isTop;			myWidth=minWidth*Math.pow(2,gameDepth);			if(hardMode) {				var rnd:Number;				var lvl:uint;				var rst:uint;				rnd=Math.random();				lvl=game.getLevel()+1;				rst=uint(rnd*lvl);				trace("rnd="+rnd+", lvl="+lvl+", rst="+rst);				hitCount = rst;				trace("HARD MODE: "+this.name+" hits set to "+hitCount);			}			if(gameDepth > 1){				for(var i=0;i<4;i++){//					trace("gridGameSquare.as line 26");					subSquare = new gridGameSquare(game, gameDepth-1, minWidth, false, hardMode);					subSquare.x = ((i%2)==0)?0:(myWidth/2);					subSquare.y = (i<2)?0:(myWidth/2);					subSquare.visible=true;					addChild(subSquare);					if(gameDepth > 2) {						subSquare.addEventListener(SquareGameEvent.ALIGN, colorMakeListener);						subSquare.addEventListener(SquareGameEvent.UNALIGN, colorBreakListener);					} else {						subSquare.addEventListener(SquareGameEvent.COLORED, colorMakeListener);						if(hardMode) subSquare.setColor();					}				}			} else {				iAmLeaf = true;			}			this.graphics.lineStyle(1, (0x4488CC)/gameDepth, 100);			if(!iAmLeaf) this.graphics.drawRect(0+gameDepth,0+gameDepth,myWidth-gameDepth, myWidth-gameDepth);			else {				this.graphics.beginFill(0xBBBBBB);//				this.graphics.drawRectComplex(0+gameDepth,0+gameDepth,myWidth-gameDepth, myWidth-gameDepth);				this.graphics.drawRect(0+gameDepth,0+gameDepth,myWidth-gameDepth, myWidth-gameDepth);				this.graphics.endFill();			}			addEventListener(MouseEvent.MOUSE_OVER, rolloverListener, !iAmLeaf);		}				public function getHitCount():uint {			var k:uint;			var l:uint;			var numColors:uint;						numColors=theGame.getLevel()+1;//			trace("gridGameSquare.as line 59");			if(!iAmTop) 				if(parent is gridGameSquare)					k=gridGameSquare(parent).getHitCount();			else k=0;			l=hitCount % numColors;			return (k+l) % numColors		}				public function setColor(initDim:Boolean=false):void {			if(iAmLeaf){				var k:uint;				k=getHitCount();				myColor=theGame.getColor(k,initDim);				this.graphics.clear();				this.graphics.beginFill(myColor);				this.graphics.drawRect(0,0,myWidth, myWidth);				this.graphics.endFill();				dispatchEvent(new SquareGameEvent(SquareGameEvent.COLORED, false, false, myColor));							} else {				return;			}		}				public function getColor():uint {			if(iAmLeaf) return myColor; 			if(pureColor) return myColor;			else return 0xcc8844;		}				private function rolloverListener(e:MouseEvent):void {//			trace("Rollover caught by "+e.currentTarget.name+" on "+e.target.name +" with hitcount "+hitCount);			hitCount++;			if(iAmLeaf) setColor();			trace(e.target.name+".MOUSE_OVER detected. "+e.currentTarget.name+" hitcount="+hitCount);		}				private function colorMakeListener(e:SquareGameEvent):void {			var nowPure:Boolean = true;			var checkColor:uint;			var tmpChild:gridGameSquare;			trace(this.name+" has caught a color="+e.getColor()+" event in colorMakeListener.");			if(iAmLeaf) {				e.target.removeEventListener(SquareGameEvent.COLORED, colorMakeListener); //Oops!				return;			}			checkColor = e.getColor();			//			trace("gridGameSquare.as line 106");			for(var i=0; i<numChildren; i++){				if(getChildAt(i) is gridGameSquare)				  tmpChild = gridGameSquare(getChildAt(i));				if(checkColor != tmpChild.getColor()) nowPure=false;			}			if(checkColor==0) nowPure = false; //Shouldn't happen, but just in case.						if(pureColor == nowPure){ //No change				return;			} else {  //Something changed, time to make notifications				pureColor = nowPure;				if(nowPure) {					myColor=checkColor;					dispatchEvent(new SquareGameEvent(SquareGameEvent.ALIGN, false, false, myColor));				} else {					myColor=0x88cc44;					dispatchEvent(new SquareGameEvent(SquareGameEvent.UNALIGN, false, false, 0));				}			}		}				private function colorBreakListener(e:SquareGameEvent):void {			trace(this.name+" has caught a color="+e.getColor()+" event in colorBreakListener.");			if(iAmLeaf) {				e.target.removeEventListener(SquareGameEvent.UNALIGN, colorBreakListener); //Oops!				return;			}			myColor=0x333333;			dispatchEvent(new SquareGameEvent(SquareGameEvent.UNALIGN, false, false, 0));		}				public function cleanup():void {			var thisChild:gridGameSquare;			trace("gridGameSquare.as line 139");			while(numChildren >0){				if(!(getChildAt(0) is gridGameSquare)) {					trace("Woha, who put a non-gridGameSquare as a display child? Breaking assumptions!");					return;				}				thisChild=gridGameSquare(getChildAt(0));				thisChild.cleanup();				removeChild(thisChild);				thisChild.removeEventListener(SquareGameEvent.ALIGN, colorMakeListener);				thisChild.removeEventListener(SquareGameEvent.UNALIGN, colorBreakListener);				thisChild.removeEventListener(SquareGameEvent.COLORED, colorMakeListener);			}			removeEventListener(MouseEvent.MOUSE_OVER, rolloverListener);		}	}}		